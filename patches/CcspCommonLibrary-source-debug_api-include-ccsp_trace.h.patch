--- ./CcspCommonLibrary/source/debug_api/include/ccsp_trace.h
+++ ./CcspCommonLibrary/source/debug_api/include/ccsp_trace.h	2015-04-22 14:22:31.162821009 -0600
@@ -71,10 +71,30 @@
 #include <syslog.h>
 #endif
     
+#ifdef FEATURE_SUPPORT_RDKLOG
+#include "rdk_debug.h"
+#endif
+
 extern  INT  g_iTraceLevel;
 extern char *g_TraceLevelStr[8];
 extern char * pComponentName;
-
+extern volatile unsigned int RDKLogLevel;
+extern volatile BOOL RDKLogEnable;
+extern volatile unsigned int TR69_RDKLogLevel;
+extern volatile unsigned int PAM_RDKLogLevel;
+extern volatile unsigned int PSM_RDKLogLevel;
+extern volatile unsigned int MTA_RDKLogLevel;
+extern volatile unsigned int CM_RDKLogLevel;
+extern volatile unsigned int WiFi_RDKLogLevel;
+extern volatile unsigned int CR_RDKLogLevel;
+
+extern volatile BOOL TR69_RDKLogEnable;
+extern volatile BOOL PAM_RDKLogEnable;
+extern volatile BOOL PSM_RDKLogEnable;
+extern volatile BOOL MTA_RDKLogEnable;
+extern volatile BOOL CM_RDKLogEnable;
+extern volatile BOOL WiFi_RDKLogEnable;
+extern volatile BOOL CR_RDKLogEnable;
 /*
  *  Whether a debug trace is output depends on the following factors:
  *      1) the trace level passed in the trace statement is higher (smaller value)
@@ -95,6 +115,28 @@
 /*
  *  trace level
  */
+#define RDK_LOG_FATAL 0
+#define RDK_LOG_ERROR 1
+#define RDK_LOG_WARN 2
+#define RDK_LOG_NOTICE 3
+#define RDK_LOG_INFO 4
+#define RDK_LOG_DEBUG 5
+
+
+#if defined(FEATURE_SUPPORT_RDKLOG)
+#define  CCSP_TRACE_LEVEL_EMERGENCY                 RDK_LOG_FATAL          /* system is going to die                               */
+#define  CCSP_TRACE_LEVEL_ALERT                     RDK_LOG_FATAL           /* system is unable to perform its functionality        */
+#define  CCSP_TRACE_LEVEL_CRITICAL                  RDK_LOG_FATAL          /* handled errors                                       */
+#define  CCSP_TRACE_LEVEL_ERROR                     RDK_LOG_ERROR           /* handled errors                                       */
+#define  CCSP_TRACE_LEVEL_WARNING                   RDK_LOG_WARN           /* warning about abnormal situation -- default level    */
+
+#define  CCSP_TRACE_LEVEL_NOTICE                    RDK_LOG_NOTICE
+#define  CCSP_TRACE_LEVEL_INFO                      RDK_LOG_INFO          /* informational trace in regular routines              */
+#define  CCSP_TRACE_LEVEL_DEBUG                     RDK_LOG_DEBUG 
+
+
+#else 
+
 #if defined(FEATURE_SUPPORT_SYSLOG)
 
 #define  CCSP_TRACE_LEVEL_EMERGENCY                 LOG_EMERG           /* system is going to die                               */
@@ -118,7 +160,7 @@
 #define  CCSP_TRACE_LEVEL_NOTICE                    5
 #define  CCSP_TRACE_LEVEL_INFO                      6           /* informational trace in regular routines              */
 #define  CCSP_TRACE_LEVEL_DEBUG                     7           /* say whatever you like, level 1                       */
-
+#endif
 #endif
 
 /*#define  CCSP_TRACE_INVALID_LEVEL                   0xFFFF*/
@@ -127,6 +169,122 @@
 /***********************************************************
             FUNCTION AND MACRO PROTOTYPE ROUTING
 ***********************************************************/
+#if defined(FEATURE_SUPPORT_RDKLOG)
+#define  CcspTraceBase(arg ...)                                                             \
+            do {                                                                            \
+                snprintf(pTempChar, 4095, arg);                                         	\
+            } while (FALSE)
+
+
+#define  CcspTraceShortenFileName(buf, maxlen, fn)					\
+	do {										\
+		int nLen = strlen(fn);							\
+		if ( nLen < maxlen )							\
+			strcpy(buf, fn);						\
+		else {									\
+			strcpy(buf, fn + nLen - maxlen + 1);				\
+		}									\
+	} while (0) 
+
+#define  CcspTraceExec(pComponentName, level, msg)                                           \
+{\
+char *ComponentName;\
+volatile unsigned int LogLevel;\
+volatile BOOLEAN LogEnable;\
+if(RDKLogEnable == TRUE)\
+{\
+if(!strcmp(pComponentName,"com.cisco.spvtg.ccsp.pam"))						\
+{												\
+	ComponentName="LOG.RDK.PAM"; 							\
+	LogLevel = PAM_RDKLogLevel;\
+	LogEnable = PAM_RDKLogEnable;\
+}												\
+else if(!strcmp(pComponentName,"com.cisco.spvtg.ccsp.tr069pa"))					\
+{												\
+	ComponentName = "LOG.RDK.TR69";							\
+	LogLevel = TR69_RDKLogLevel;\
+	LogEnable = TR69_RDKLogEnable;\
+	/*printf("-- LogLevel = %d\n LogEnable = %d\n",LogLevel,LogEnable);*/\
+}												\
+else if(!strcmp(pComponentName,"com.cisco.spvtg.ccsp.psm"))					\
+{												\
+	ComponentName= "LOG.RDK.PSM";							\
+	LogLevel = PSM_RDKLogLevel;\
+	LogEnable = PSM_RDKLogEnable;\
+}												\
+else if(!strcmp(pComponentName,"com.cisco.spvtg.ccsp.CR"))					\
+{												\
+	ComponentName="LOG.RDK.CR";							\
+	LogLevel = CR_RDKLogLevel;\
+	LogEnable = CR_RDKLogEnable;\
+}												\
+else if(!strcmp(pComponentName,"com.cisco.spvtg.ccsp.mta"))					\
+{												\
+	ComponentName="LOG.RDK.MTA";							\
+		LogLevel = MTA_RDKLogLevel;\
+	LogEnable = MTA_RDKLogEnable;\
+}												\
+else if(!strcmp(pComponentName,"com.cisco.spvtg.ccsp.cm"))					\
+{												\
+	ComponentName="LOG.RDK.CM";							\
+	LogLevel = CM_RDKLogLevel;\
+	LogEnable = CM_RDKLogEnable;\
+}												\
+else if(!strcmp(pComponentName,"com.cisco.spvtg.ccsp.tdm"))					\
+{												\
+	ComponentName="LOG.RDK.TDM";							\
+			LogLevel = RDKLogLevel;\
+		LogEnable = RDKLogEnable;\
+}												\
+else if(!strcmp(pComponentName,"com.cisco.spvtg.ccsp.ssd"))					\
+{												\
+	ComponentName="LOG.RDK.SSD";							\
+			LogLevel = RDKLogLevel;\
+		LogEnable = RDKLogEnable;\
+}												\
+else if(!strcmp(pComponentName,"com.cisco.spvtg.ccsp.fu"))					\
+{												\
+	ComponentName="LOG.RDK.FU";							\
+			LogLevel = RDKLogLevel;\
+		LogEnable = RDKLogEnable;\
+}\
+else if(!strcmp(pComponentName,"com.cisco.spvtg.ccsp.logagent"))					\
+{												\
+	ComponentName="LOG.RDK.WIFI";							\
+	LogLevel = WiFi_RDKLogLevel;\
+	LogEnable = WiFi_RDKLogEnable;\
+}\
+else\
+{\
+		ComponentName = "LOG.RDK.Misc";							\
+		LogLevel = RDKLogLevel;\
+		LogEnable = RDKLogEnable;\
+}												\
+/*if( level<=RDKLogLevel)*/\
+if((level<=LogLevel)&&(LogEnable == TRUE))\
+{\
+/*  if ( level <= g_iTraceLevel)                */                                     \
+if(!strcmp(pComponentName,"com.cisco.spvtg.ccsp.tr069pa"))\
+{\
+/*printf("-- level = %d\n LogLevel = %d\n LogEnable = %d\n",level,LogLevel,LogEnable);*/\
+}\
+            {                                                                                \
+                char*   pTempChar = (char*)malloc(4096);                                     \
+                if ( pTempChar )                                                             \
+                {                                                                            \
+					char	sfn[32];														 \
+                    CcspTraceBase msg;                                                       \
+					CcspTraceShortenFileName(sfn, 32, __FILE__);							 \
+		    RDK_LOG(level,ComponentName,pTempChar); \
+                    free(pTempChar);                                                         \
+                }                                                                            \
+            }\
+}\
+}\
+}
+								
+
+#else 
 #if defined(FEATURE_SUPPORT_SYSLOG)
 
 #define  CcspTraceBase(arg ...)                                                             \
@@ -191,10 +349,14 @@
             }
 
 #endif
-
-
-#define  CcspTraceCheck(level)                  (level <= g_iTraceLevel)
-
+#endif
+/*
+#define  AnscTraceExec(level, msg)              \
+            if ( level <= g_iTraceLevel)        \
+            {                                   \
+                CcspTraceBase msg;              \
+            }
+*/
 /**********************************************************************************************
   When use the following macros, msg should be wrapped by parenthesis.
   For example, CcspTraceEmergency(pComponentName, ("print info:%s\n", pPrintInfo))
